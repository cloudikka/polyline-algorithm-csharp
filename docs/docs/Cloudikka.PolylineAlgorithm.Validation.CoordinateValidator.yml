### YamlMime:ManagedReference
items:
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  commentId: T:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  id: CoordinateValidator
  parent: Cloudikka.PolylineAlgorithm.Validation
  children:
  - Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid(System.ValueTuple{System.Double,System.Double})
  - Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude(System.Double)
  - Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude(System.Double)
  langs:
  - csharp
  - vb
  name: CoordinateValidator
  nameWithType: CoordinateValidator
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  type: Class
  source:
    remote:
      path: src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
      branch: alpha
      repo: https://github.com/cloudikka/polyline-algorithm-csharp.git
    id: CoordinateValidator
    path: ../src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
    startLine: 9
  assemblies:
  - Cloudikka.PolylineAlgorithm
  namespace: Cloudikka.PolylineAlgorithm.Validation
  summary: "\nPerforms coordinate validation\n"
  example: []
  syntax:
    content: public static class CoordinateValidator
    content.vb: Public Module CoordinateValidator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid(System.ValueTuple{System.Double,System.Double})
  commentId: M:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid(System.ValueTuple{System.Double,System.Double})
  id: IsValid(System.ValueTuple{System.Double,System.Double})
  parent: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: CoordinateValidator.IsValid()
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid(System.)
  type: Method
  source:
    remote:
      path: src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
      branch: alpha
      repo: https://github.com/cloudikka/polyline-algorithm-csharp.git
    id: IsValid
    path: ../src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
    startLine: 17
  assemblies:
  - Cloudikka.PolylineAlgorithm
  namespace: Cloudikka.PolylineAlgorithm.Validation
  summary: "\nPerforms coordinate validation\n"
  example: []
  syntax:
    content: public static bool IsValid(coordinate)
    parameters:
    - id: coordinate
      type: System.ValueTuple{System.Double,System.Double}
      description: Coordinate to validate
    return:
      type: System.Boolean
      description: Returns boolean value as validation result. If valid then true, otherwise false.
    content.vb: Public Shared Function IsValid(coordinate As ) As Boolean
  overload: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude(System.Double)
  commentId: M:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude(System.Double)
  id: IsValidLatitude(System.Double)
  parent: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  langs:
  - csharp
  - vb
  name: IsValidLatitude(Double)
  nameWithType: CoordinateValidator.IsValidLatitude(Double)
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude(System.Double)
  type: Method
  source:
    remote:
      path: src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
      branch: alpha
      repo: https://github.com/cloudikka/polyline-algorithm-csharp.git
    id: IsValidLatitude
    path: ../src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
    startLine: 26
  assemblies:
  - Cloudikka.PolylineAlgorithm
  namespace: Cloudikka.PolylineAlgorithm.Validation
  summary: "\nPerforms latitude validation\n"
  example: []
  syntax:
    content: public static bool IsValidLatitude(double latitude)
    parameters:
    - id: latitude
      type: System.Double
      description: Latitude value to validate
    return:
      type: System.Boolean
      description: Returns boolean value as validation result. If valid then true, otherwise false.
    content.vb: Public Shared Function IsValidLatitude(latitude As Double) As Boolean
  overload: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude(System.Double)
  commentId: M:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude(System.Double)
  id: IsValidLongitude(System.Double)
  parent: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator
  langs:
  - csharp
  - vb
  name: IsValidLongitude(Double)
  nameWithType: CoordinateValidator.IsValidLongitude(Double)
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude(System.Double)
  type: Method
  source:
    remote:
      path: src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
      branch: alpha
      repo: https://github.com/cloudikka/polyline-algorithm-csharp.git
    id: IsValidLongitude
    path: ../src/Cloudikka.PolylineAlgorithm/Cloudikka.PolylineAlgorithm/Validation/CoordinateValidator.cs
    startLine: 35
  assemblies:
  - Cloudikka.PolylineAlgorithm
  namespace: Cloudikka.PolylineAlgorithm.Validation
  summary: "\nPerforms longitude validation\n"
  example: []
  syntax:
    content: public static bool IsValidLongitude(double longitude)
    parameters:
    - id: longitude
      type: System.Double
      description: Longitude value to validate
    return:
      type: System.Boolean
      description: Returns boolean value as validation result. If valid then true, otherwise false.
    content.vb: Public Shared Function IsValidLongitude(longitude As Double) As Boolean
  overload: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Cloudikka.PolylineAlgorithm.Validation
  commentId: N:Cloudikka.PolylineAlgorithm.Validation
  isExternal: false
  name: Cloudikka.PolylineAlgorithm.Validation
  nameWithType: Cloudikka.PolylineAlgorithm.Validation
  fullName: Cloudikka.PolylineAlgorithm.Validation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid*
  commentId: Overload:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid
  isExternal: false
  name: IsValid
  nameWithType: CoordinateValidator.IsValid
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValid
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  isExternal: false
  name: ''
  nameWithType: ''
  fullName: System.
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude*
  commentId: Overload:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude
  isExternal: false
  name: IsValidLatitude
  nameWithType: CoordinateValidator.IsValidLatitude
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLatitude
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude*
  commentId: Overload:Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude
  isExternal: false
  name: IsValidLongitude
  nameWithType: CoordinateValidator.IsValidLongitude
  fullName: Cloudikka.PolylineAlgorithm.Validation.CoordinateValidator.IsValidLongitude
